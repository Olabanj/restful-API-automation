{
	"info": {
		"_postman_id": "b5404ace-94f6-43ba-ba7f-4d9d566df7b4",
		"name": "Safetoken-API-2.0-Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16602234"
	},
	"item": [
		{
			"name": "Set Up",
			"item": [
				{
					"name": "Create Other Token Requestor - Store Token Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"apiKey is returned\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"apiKey\");\r",
									"    pm.expect(response.apiKey).to.be.not.empty;  \r",
									"    pm.environment.set(\"other-registered-token-api-key\", response.apiKey);\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestRequestorSaveOther\",\r\n    \"storeTokenDetails\": true,\r\n    \"validityPeriod\": 10,\r\n    \"timestampWindow\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Other Soft Token - Valid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\");        \r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is saved\", function () {    \r",
									"    var request = JSON.parse(pm.request.body.raw);\r",
									"    pm.environment.set(\"other-registered-token-id\", request.tokenId);\r",
									"});\r",
									"\r",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"other-registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{other-registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken{{$timestamp}}\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Admin - New Token Requestor",
			"item": [
				{
					"name": "Create Token Requestor - Valid Data - Store Token Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"apiKey is returned\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"apiKey\");\r",
									"    pm.expect(response.apiKey).to.be.not.empty;  \r",
									"    pm.environment.set(\"registered-token-api-key\", response.apiKey);\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestRequestorSave\",\r\n    \"storeTokenDetails\": true,\r\n    \"validityPeriod\": 10,\r\n    \"timestampWindow\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - Valid Data - Do Not Store Token Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"apiKey is returned\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"apiKey\");\r",
									"    pm.expect(response.apiKey).to.be.not.empty;       \r",
									"    pm.environment.set(\"unregistered-token-api-key\", response.apiKey); \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestRequestorNoSave\",\r\n    \"storeTokenDetails\": false,\r\n    \"validityPeriod\": 10,\r\n    \"timestampWindow\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - Existing Requestor - Store Token Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '409'\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10409'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10409\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Oops! Token Requestor already exists'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Oops! Token Requestor already exists.\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestRequestorSave\",\r\n    \"storeTokenDetails\": true,\r\n    \"validityPeriod\": 10,\r\n    \"timestampWindow\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - Existing Requestor - Do Not Store Token Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '409'\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10409'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10409\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Oops! Token Requestor already exists'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Oops! Token Requestor already exists.\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestRequestorNoSave\",\r\n    \"storeTokenDetails\": false,\r\n    \"validityPeriod\": 10,\r\n    \"timestampWindow\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - No  Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"name is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"name\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"\",\r\n    \"storeTokenDetails\": true,\r\n    \"validityPeriod\": 10,\r\n    \"timestampWindow\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - No Timestamp Window",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"timestampWindow is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"timestampWindow\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestRequestorNoTimeStampWindow\",\r\n    \"storeTokenDetails\": true,\r\n    \"validityPeriod\": 10,\r\n    \"timestampWindow\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - No Validity Period",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"validityPeriod is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"validityPeriod\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestRequestorNoValidityPeriod\",\r\n    \"storeTokenDetails\": true,\r\n    \"validityPeriod\": \"\",\r\n    \"timestampWindow\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - No Store Token Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"storeTokenDetails is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"storeTokenDetails\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestRequestorNoStoreTokenDetails\",\r\n    \"storeTokenDetails\": \"\",\r\n    \"validityPeriod\": 10,\r\n    \"timestampWindow\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - No Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"name is required\", function () {    \r",
									"    var error = response.errors.find((error) => error.fieldName === \"name\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"storeTokenDetails is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"storeTokenDetails\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"timestampWindow is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"timestampWindow\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"validityPeriod is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"validityPeriod\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - Only Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"storeTokenDetails is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"storeTokenDetails\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"timestampWindow is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"timestampWindow\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"validityPeriod is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"validityPeriod\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"TestTokenRequestorOnlyName\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - Only Store Token Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"name is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"name\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"storeTokenDetails is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"storeTokenDetails\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"validityPeriod is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"validityPeriod\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"timestampWindow\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - Only Timestamp Window",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"name is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"name\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"timestampWindow is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"timestampWindow\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"validityPeriod is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"validityPeriod\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"storeTokenDetails\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - Only Validity Period",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"name is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"name\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"storeTokenDetails is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"storeTokenDetails\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"timestampWindow is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"timestampWindow\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"validityPeriod\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - Invalid Store Token Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"storeTokenDetails is invalid\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"storeTokenDetails\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"invalid\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestTokenRequestorInvalidStoreTokenDetails\",\r\n    \"storeTokenDetails\": \"0\",\r\n    \"validityPeriod\": 10,\r\n    \"timestampWindow\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Hard Token - Register",
			"item": [
				{
					"name": "Register Hard Token - Valid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");",
									"",
									"pm.environment.set(\"seed\", _.randomHexadecimal(20));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        },\r\n    \"seed\": \"{{seed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - Existing Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '409'\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10409'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10409\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token already exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token already exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");",
									"",
									"pm.environment.set(\"seed\", _.randomHexadecimal(20));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        },\r\n    \"seed\": \"{{seed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - No Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {    \r",
									"    var error = response.errors.find((error) => error.fieldName === \"tokenId\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"tokenOwner\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"seed is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"seed\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - No Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"ApiKey is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"header\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"Required request header 'ApiKey' for method parameter type String is not present\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"pm.environment.set(\"seed\", _.randomHexadecimal(20));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        },\r\n    \"seed\": \"{{seed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - Empty ApiKey",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"pm.environment.set(\"seed\", _.randomHexadecimal(20));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        },\r\n    \"seed\": \"{{seed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - Invalid Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"pm.environment.set(\"random-api-key\", _.randomAlphaNumeric(26));",
									"",
									"pm.environment.set(\"seed\", _.randomHexadecimal(20));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{random-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        },\r\n    \"seed\": \"{{seed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - No Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");",
									"",
									"pm.environment.set(\"seed\", _.randomHexadecimal(20));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        },\r\n    \"seed\": \"{{seed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - No Token Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");",
									"",
									"pm.environment.set(\"seed\", _.randomHexadecimal(20));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"seed\": \"{{seed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - No Token Owner First Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner.firstName is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner.firstName\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");",
									"",
									"pm.environment.set(\"seed\", _.randomHexadecimal(20));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        },\r\n    \"seed\": \"{{seed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - No Token Owner Last Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner.lastName is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner.lastName\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");",
									"",
									"pm.environment.set(\"seed\", _.randomHexadecimal(20));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        },\r\n    \"seed\": \"{{seed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - No Token Owner Mobile Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner.mobileNo is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner.mobileNo\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");",
									"",
									"pm.environment.set(\"seed\", _.randomHexadecimal(20));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardTokenNoTokenOwnerMobileNo\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        },\r\n    \"seed\": \"{{seed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - No Token Owner Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");",
									"",
									"pm.environment.set(\"seed\", _.randomHexadecimal(20));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardTokenNoTokenOwnerEmail\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"\"\r\n        },\r\n    \"seed\": \"{{seed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - No Token Owner Mobile Number Or Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner.mobileNo is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner.mobileNo\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"\",\r\n        \"email\": \"\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - No Seed",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"seed is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"seed\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - Invalid Token Owner Mobile Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner.mobileNo is invalid\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner.mobileNo\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"invalid\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");",
									"",
									"pm.environment.set(\"seed\", _.randomHexadecimal(20));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"0803$000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        },\r\n    \"seed\": \"{{seed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Hard Token - Invalid Token Owner Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner.email is invalid\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner.email\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"invalid\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");",
									"",
									"pm.environment.set(\"seed\", _.randomHexadecimal(20));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.ownersharklasers.com\"\r\n        },\r\n    \"seed\": \"{{seed}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Hard Token - Authenticate",
			"item": [
				{
					"name": "Authenticate Hard Token - Invalid OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '99'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"99\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Invalid otp'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Invalid otp\")\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");",
									"",
									"pm.environment.set(\"random-otp\", _.randomNumeric(6));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"otp\": \"{{random-otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Hard Token - No Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"ApiKey is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"header\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"Required request header 'ApiKey' for method parameter type String is not present\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"otp\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Hard Token - Empty Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"otp\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Hard Token - Invalid Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"pm.environment.set(\"random-api-key\", _.randomAlphaNumeric(26));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{random-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"otp\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Hard Token - No Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"\",\r\n    \"otp\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Hard Token - No OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"otp is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"otp\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestHardToken\",\r\n    \"otp\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/hard-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"hard-token",
								"authenticate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Soft Token - Register",
			"item": [
				{
					"name": "Register Soft Token - Valid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - Existing Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '409'\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10409'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10409\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token already exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token already exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - No Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {    \r",
									"    var error = response.errors.find((error) => error.fieldName === \"tokenId\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"tokenOwner\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - No Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"ApiKey is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"header\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"Required request header 'ApiKey' for method parameter type String is not present\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - Empty Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - Invalid Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"pm.environment.set(\"random-api-key\", _.randomAlphaNumeric(26));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{random-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - No Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - No Token Owner",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - No Token Owner First Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner.firstName is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner.firstName\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - No Token Owner Last Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner.lastName is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner.lastName\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - No Token Owner Mobile Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner.mobileNo is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner.mobileNo\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftTokenNoTokenOwnerMobileNo\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - No Token Owner Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftTokenNoTokenOwnerEmail\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - No Token Owner Mobile Number Or Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner.mobileNo is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner.mobileNo\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"\",\r\n        \"email\": \"\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - Invalid Token Owner Mobile Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner.mobileNo is invalid\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner.mobileNo\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"invalid\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"0803$000000\",\r\n        \"email\": \"token.owner@sharklasers.com\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Soft Token - Invalid Token Owner Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenOwner.email is invalid\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenOwner.email\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"invalid\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"tokenOwner\": {\r\n        \"firstName\": \"Token\",\r\n        \"lastName\": \"Owner\",\r\n        \"mobileNo\": \"08030000000\",\r\n        \"email\": \"token.ownersharklasers.com\"\r\n        }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Soft Token - Generate - Registration Required",
			"item": [
				{
					"name": "Generate Soft Token - Registered Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"otp is returned\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"otp\");\r",
									"    pm.expect(response.otp).to.be.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"expiry is returned\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"expiry\");\r",
									"    pm.expect(response.expiry).to.be.not.empty;\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Soft Token - Unregistered Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftTokenUnregistered\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Soft Token - No Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"ApiKey is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"header\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"Required request header 'ApiKey' for method parameter type String is not present\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Soft Token - Empty Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Soft Token - Invalid Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"pm.environment.set(\"random-api-key\", _.randomAlphaNumeric(26));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{random-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Soft Token - No Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Soft Token - No Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Soft Token - Mismatched Requestor and Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"other-registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{other-registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftTokenMismatched\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Soft Token - Generate - Registration Not Required",
			"item": [
				{
					"name": "Generate Soft Token - Valid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"otp is returned\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"otp\");\r",
									"    pm.expect(response.otp).to.be.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"expiry is returned\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"expiry\");\r",
									"    pm.expect(response.expiry).to.be.not.empty;\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Soft Token - No Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"ApiKey is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"header\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"Required request header 'ApiKey' for method parameter type String is not present\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Soft Token - Empty Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Soft Token - Invalid Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"pm.environment.set(\"random-api-key\", _.randomAlphaNumeric(26));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{random-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Soft Token - No Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Soft Token - No Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Soft Token - Authenticate",
			"item": [
				{
					"name": "Generate Soft Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"otp is returned\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"otp\");\r",
									"    pm.expect(response.otp).to.be.not.empty;\r",
									"    pm.environment.set(\"otp\", response.otp);\r",
									"});\r",
									"\r",
									"pm.test(\"expiry is returned\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"expiry\");\r",
									"    pm.expect(response.expiry).to.be.not.empty;\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Valid OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\")\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"otp\": \"{{otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Invalid OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '99'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"99\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Invalid otp'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Invalid otp\")\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");",
									"",
									"pm.environment.set(\"random-otp\", _.randomNumeric(6));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"otp\": \"{{random-otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - No Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"ApiKey is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"header\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"Required request header 'ApiKey' for method parameter type String is not present\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"otp\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Empty Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"otp\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Invalid Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"pm.environment.set(\"random-api-key\", _.randomAlphaNumeric(26));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{random-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"otp\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - No Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"\",\r\n    \"otp\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - No OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"otp is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"otp\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"otp\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Token Requestor - Minimum Validity",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"apiKey is returned\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"apiKey\");\r",
									"    pm.expect(response.apiKey).to.be.not.empty;  \r",
									"    pm.environment.set(\"minimum-validity-token-api-key\", response.apiKey);\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"TestRequestorMinimumValidity\",\r\n    \"storeTokenDetails\": false,\r\n    \"validityPeriod\": 1,\r\n    \"timestampWindow\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/admin/new-requestor",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"admin",
								"new-requestor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Soft Token - Minimum Validity",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"otp is returned\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"otp\");\r",
									"    pm.expect(response.otp).to.be.not.empty;\r",
									"    pm.environment.set(\"otp\", response.otp);\r",
									"});\r",
									"\r",
									"pm.test(\"expiry is returned\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"expiry\");\r",
									"    pm.expect(response.expiry).to.be.not.empty;    \r",
									"    pm.environment.set(\"expiry\", response.expiry);\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"minimum-validity-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{minimum-validity-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/generate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Expired OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '99'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"99\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Invalid otp'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Invalid otp\")\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"minimum-validity-token-api-key\");",
									"",
									"// pause for otp to expire",
									"// interval should be based on \"expiry\" environment variable",
									"checkEnvVar(\"expiry\");",
									"",
									"const moment = require('moment');",
									"",
									"var expiry = moment(pm.environment.get(\"expiry\"), \"DD-MMM-YY hh:mm a\");",
									"",
									"var delay = (expiry - new Date()) + 60000; // 60000 is to cater for the timestamp window",
									"",
									"setTimeout(function(){}, delay);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{minimum-validity-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"otp\": \"{{otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Soft Token - Validate - Registration Required",
			"item": [
				{
					"name": "Validate Soft Token - Registered Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Unregistered Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftTokenUnregistered\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - No Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"ApiKey is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"header\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"Required request header 'ApiKey' for method parameter type String is not present\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"mobileNo\": \"08030000000\",\r\n    \"email\": \"token.owner@sharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Empty Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"mobileNo\": \"08030000000\",\r\n    \"email\": \"token.owner@sharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Invalid Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"pm.environment.set(\"random-api-key\", _.randomAlphaNumeric(26));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{random-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"mobileNo\": \"08030000000\",\r\n    \"email\": \"token.owner@sharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - No Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"\",\r\n    \"mobileNo\": \"08030000000\",\r\n    \"email\": \"token.owner@sharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - No Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Invalid Mobile Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"mobileNo is invalid\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"mobileNo\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"invalid\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"other-registered-token-api-key\");",
									"",
									"checkEnvVar(\"other-registered-token-id\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{other-registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"{{other-registered-token-id}}\",\r\n    \"mobileNo\": \"0803$000000\",\r\n    \"email\": \"token.owner@sharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"email is invalid\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"email\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"invalid\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"mobileNo\": \"08030000000\",\r\n    \"email\": \"token.ownersharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Mismatched Requestor and Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"other-registered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{other-registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftTokenMismatched\",\r\n    \"mobileNo\": \"08030000000\",\r\n    \"email\": \"token.owner@sharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Soft Token - Validate - Registration Not Required",
			"item": [
				{
					"name": "Validate Soft Token - Valid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"sms is '*******0000'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"sms\");\r",
									"    pm.expect(response.sms).to.eql(\"*******0000\");\r",
									"});\r",
									"\r",
									"pm.test(\"email is 't**********@sharklasers.com'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"email\");\r",
									"    pm.expect(response.email).to.eql(\"t**********@sharklasers.com\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"mobileNo\": \"08030000000\",\r\n    \"email\": \"token.owner@sharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - No Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"ApiKey is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"header\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"Required request header 'ApiKey' for method parameter type String is not present\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"mobileNo\": \"08030000000\",\r\n    \"email\": \"token.owner@sharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Empty Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"mobileNo\": \"08030000000\",\r\n    \"email\": \"token.owner@sharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Invalid Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"pm.environment.set(\"random-api-key\", _.randomAlphaNumeric(26));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{random-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"mobileNo\": \"08030000000\",\r\n    \"email\": \"token.owner@sharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - No Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"\",\r\n    \"mobileNo\": \"08030000000\",\r\n    \"email\": \"token.owner@sharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - No Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - No Mobile Number Or Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"mobileNo is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"mobileNo\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftTokenNoMobileNoOrEmail\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Invalid Mobile Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"mobileNo is invalid\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"mobileNo\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"invalid\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"other-registered-token-api-key\");",
									"",
									"checkEnvVar(\"other-registered-token-id\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{other-registered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"{{other-registered-token-id}}\",\r\n    \"mobileNo\": \"0803$000000\",\r\n    \"email\": \"token.owner@sharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Invalid Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"email is invalid\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"email\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"invalid\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftToken\",\r\n    \"mobileNo\": \"08030000000\",\r\n    \"email\": \"token.ownersharklasers.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Soft Token - Validate - Zenith Provider",
			"item": [
				{
					"name": "Validate Soft Token - Valid Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"sms is '********880'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"sms\");\r",
									"    pm.expect(response.sms).to.eql(\"********880\");\r",
									"});\r",
									"\r",
									"pm.test(\"email is 'zen***@sharklasers.com'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"email\");\r",
									"    pm.expect(response.email).to.eql(\"zen***@sharklasers.com\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - No Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"ApiKey is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"header\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"Required request header 'ApiKey' for method parameter type String is not present\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Empty Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Invalid Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"pm.environment.set(\"random-api-key\", _.randomAlphaNumeric(26));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{random-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Invalid Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Provider does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Provider does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "000",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - No Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - Invalid Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"TestSoftTokenInvalid\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Soft Token - No Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Soft Token - Authenticate - Zenith Provider",
			"item": [
				{
					"name": "Authenticate Soft Token - Get Email Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"email-sid is returned\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"sid_token\");\r",
									"    pm.expect(response.sid_token).to.be.not.empty;  \r",
									"    pm.environment.set(\"email-sid\", response.sid_token);\r",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.guerrillamail.com/ajax.php?f=get_email_address&site=sharklasers.com",
							"protocol": "https",
							"host": [
								"api",
								"guerrillamail",
								"com"
							],
							"path": [
								"ajax.php"
							],
							"query": [
								{
									"key": "f",
									"value": "get_email_address"
								},
								{
									"key": "site",
									"value": "sharklasers.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Set Email User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {\r",
									"    if (_.isEmpty(pm.environment.get(envVar))) {\r",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")\r",
									"    }\r",
									"}\r",
									"\r",
									"checkEnvVar(\"email-sid\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.guerrillamail.com/ajax.php?f=set_email_user&sid_token={{email-sid}}&email_user=zenotptest&site=sharklasers.com",
							"protocol": "https",
							"host": [
								"api",
								"guerrillamail",
								"com"
							],
							"path": [
								"ajax.php"
							],
							"query": [
								{
									"key": "f",
									"value": "set_email_user"
								},
								{
									"key": "sid_token",
									"value": "{{email-sid}}"
								},
								{
									"key": "email_user",
									"value": "zenotptest"
								},
								{
									"key": "site",
									"value": "sharklasers.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Validate",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"sms is '********880'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"sms\");\r",
									"    pm.expect(response.sms).to.eql(\"********880\");\r",
									"});\r",
									"\r",
									"pm.test(\"email is 'zen***@sharklasers.com'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"email\");\r",
									"    pm.expect(response.email).to.eql(\"zen***@sharklasers.com\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Get Email List",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = pm.response.json();\r",
									"\r",
									"var mail = response.list.find((mail) => mail.mail_from === \"cardservices@zenithbank.com\");\r",
									"\r",
									"if (mail == null) {\r",
									"    console.log(\"Mail has not been delivered. Retrying...\");\r",
									"    postman.setNextRequest(\"Authenticate Soft Token - Get Email List\");\r",
									"} else {\r",
									"    pm.test(\"email id is returned\", function () {\r",
									"        pm.expect(mail).to.exist;\r",
									"        pm.expect(mail.mail_id).to.be.not.empty;\r",
									"        pm.environment.set(\"email-id\", mail.mail_id);\r",
									"    });\r",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {\r",
									"    if (_.isEmpty(pm.environment.get(envVar))) {\r",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")\r",
									"    }\r",
									"}\r",
									"\r",
									"checkEnvVar(\"email-sid\");\r",
									"\r",
									"// pause for email to be delivered\r",
									"setTimeout(function(){}, 30000); // 30 seconds"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.guerrillamail.com/ajax.php?f=get_email_list&sid_token={{email-sid}}&offset=0",
							"protocol": "https",
							"host": [
								"api",
								"guerrillamail",
								"com"
							],
							"path": [
								"ajax.php"
							],
							"query": [
								{
									"key": "f",
									"value": "get_email_list"
								},
								{
									"key": "sid_token",
									"value": "{{email-sid}}"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Fetch Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function substringBetween(str, start, end) {\r",
									"    const matches = str.match(new RegExp(start + \"(.*)\" + end));\r",
									"    return matches[1];\r",
									"}\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"otp is returned\", function () {\r",
									"    var otp = substringBetween(response.mail_body, 'Use ', ' as your One Time Password');\r",
									"    pm.expect(otp).to.be.not.empty;\r",
									"    pm.environment.set(\"otp\", otp);\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {\r",
									"    if (_.isEmpty(pm.environment.get(envVar))) {\r",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")\r",
									"    }\r",
									"}\r",
									"\r",
									"checkEnvVar(\"email-sid\");\r",
									"\r",
									"checkEnvVar(\"email-id\");\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.guerrillamail.com/ajax.php?f=fetch_email&sid_token={{email-sid}}&email_id={{email-id}}",
							"protocol": "https",
							"host": [
								"api",
								"guerrillamail",
								"com"
							],
							"path": [
								"ajax.php"
							],
							"query": [
								{
									"key": "f",
									"value": "fetch_email"
								},
								{
									"key": "sid_token",
									"value": "{{email-sid}}"
								},
								{
									"key": "email_id",
									"value": "{{email-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Delete Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"email is deleted\", function () {\r",
									"    var mail = response.deleted_ids.find((mail) => mail === pm.environment.get(\"email-id\"));\r",
									"    pm.expect(mail).to.exist;\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {\r",
									"    if (_.isEmpty(pm.environment.get(envVar))) {\r",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")\r",
									"    }\r",
									"}\r",
									"\r",
									"checkEnvVar(\"email-sid\");\r",
									"\r",
									"checkEnvVar(\"email-id\");\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.guerrillamail.com/ajax.php?f=del_email&sid_token={{email-sid}}&email_ids[]={{email-id}}",
							"protocol": "https",
							"host": [
								"api",
								"guerrillamail",
								"com"
							],
							"path": [
								"ajax.php"
							],
							"query": [
								{
									"key": "f",
									"value": "del_email"
								},
								{
									"key": "sid_token",
									"value": "{{email-sid}}"
								},
								{
									"key": "email_ids[]",
									"value": "{{email-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Valid OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\")\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\",\r\n    \"otp\": \"{{otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Invalid OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '99'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"99\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Invalid otp'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Invalid otp\")\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");",
									"",
									"pm.environment.set(\"random-otp\", _.randomNumeric(6));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\",\r\n    \"otp\": \"{{random-otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - No Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"ApiKey is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"header\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"Required request header 'ApiKey' for method parameter type String is not present\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Empty Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\",\r\n    \"otp\": \"{{otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Invalid Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"pm.environment.set(\"random-api-key\", _.randomAlphaNumeric(26));"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{random-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\",\r\n    \"otp\": \"{{otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Invalid Provider",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Provider does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Provider does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "000",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\",\r\n    \"otp\": \"{{otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - No Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"\",\r\n    \"otp\": \"{{otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - No OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"otp is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"otp\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\",\r\n    \"otp\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - No Parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"tokenId\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});\r",
									"\r",
									"pm.test(\"otp is required\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"otp\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Validate II",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"sms is '********880'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"sms\");\r",
									"    pm.expect(response.sms).to.eql(\"********880\");\r",
									"});\r",
									"\r",
									"pm.test(\"email is 'zen***@sharklasers.com'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"email\");\r",
									"    pm.expect(response.email).to.eql(\"zen***@sharklasers.com\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Get Email List II",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = pm.response.json();\r",
									"\r",
									"var mail = response.list.find((mail) => mail.mail_from === \"cardservices@zenithbank.com\");\r",
									"\r",
									"if (mail == null) {\r",
									"    console.log(\"Mail has not been delivered. Retrying...\");\r",
									"    postman.setNextRequest(\"Authenticate Soft Token - Get Email List II\");\r",
									"} else {\r",
									"    pm.test(\"email id is returned\", function () {\r",
									"        pm.expect(mail).to.exist;\r",
									"        pm.expect(mail.mail_id).to.be.not.empty;\r",
									"        pm.environment.set(\"email-id\", mail.mail_id);\r",
									"    });\r",
									"}"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {\r",
									"    if (_.isEmpty(pm.environment.get(envVar))) {\r",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")\r",
									"    }\r",
									"}\r",
									"\r",
									"checkEnvVar(\"email-sid\");\r",
									"\r",
									"// pause for email to be delivered\r",
									"setTimeout(function(){}, 30000); // 30 seconds"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.guerrillamail.com/ajax.php?f=get_email_list&sid_token={{email-sid}}&offset=0",
							"protocol": "https",
							"host": [
								"api",
								"guerrillamail",
								"com"
							],
							"path": [
								"ajax.php"
							],
							"query": [
								{
									"key": "f",
									"value": "get_email_list"
								},
								{
									"key": "sid_token",
									"value": "{{email-sid}}"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Fetch Email II",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function substringBetween(str, start, end) {\r",
									"    const matches = str.match(new RegExp(start + \"(.*)\" + end));\r",
									"    return matches[1];\r",
									"}\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"otp is returned\", function () {\r",
									"    var otp = substringBetween(response.mail_body, 'Use ', ' as your One Time Password');\r",
									"    pm.expect(otp).to.be.not.empty;\r",
									"    pm.environment.set(\"otp\", otp);\r",
									"});\r",
									"\r",
									"pm.test(\"expiry is returned\", function () {    \r",
									"    var expiry = substringBetween(response.mail_body, 'It expires by ', '\\\\.');\r",
									"    pm.expect(expiry).to.be.not.empty;    \r",
									"    pm.environment.set(\"expiry\", expiry);\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {\r",
									"    if (_.isEmpty(pm.environment.get(envVar))) {\r",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")\r",
									"    }\r",
									"}\r",
									"\r",
									"checkEnvVar(\"email-sid\");\r",
									"\r",
									"checkEnvVar(\"email-id\");\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.guerrillamail.com/ajax.php?f=fetch_email&sid_token={{email-sid}}&email_id={{email-id}}",
							"protocol": "https",
							"host": [
								"api",
								"guerrillamail",
								"com"
							],
							"path": [
								"ajax.php"
							],
							"query": [
								{
									"key": "f",
									"value": "fetch_email"
								},
								{
									"key": "sid_token",
									"value": "{{email-sid}}"
								},
								{
									"key": "email_id",
									"value": "{{email-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Delete Email II",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"email is deleted\", function () {\r",
									"    var mail = response.deleted_ids.find((mail) => mail === pm.environment.get(\"email-id\"));\r",
									"    pm.expect(mail).to.exist;\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {\r",
									"    if (_.isEmpty(pm.environment.get(envVar))) {\r",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")\r",
									"    }\r",
									"}\r",
									"\r",
									"checkEnvVar(\"email-sid\");\r",
									"\r",
									"checkEnvVar(\"email-id\");\r",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.guerrillamail.com/ajax.php?f=del_email&sid_token={{email-sid}}&email_ids[]={{email-id}}",
							"protocol": "https",
							"host": [
								"api",
								"guerrillamail",
								"com"
							],
							"path": [
								"ajax.php"
							],
							"query": [
								{
									"key": "f",
									"value": "del_email"
								},
								{
									"key": "sid_token",
									"value": "{{email-sid}}"
								},
								{
									"key": "email_ids[]",
									"value": "{{email-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Expired OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '99'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"99\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Invalid otp'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Invalid otp\")\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");",
									"",
									"// pause for otp to expire",
									"// interval should be based on \"expiry\" environment variable",
									"checkEnvVar(\"expiry\");",
									"",
									"const moment = require('moment');",
									"",
									"var expiry = moment(pm.environment.get(\"expiry\"), \"MM/DD/YYYY h:mm:ss a\");",
									"",
									"var delay = (expiry - new Date()) + 60000; // 60000 is to cater for the timestamp window",
									"",
									"setTimeout(function(){}, delay);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109032926975458\",\r\n    \"otp\": \"{{otp}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/authenticate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Validate, Invalid Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token does not exist\");        \r",
									"});\r",
									"\r",
									""
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"506109332563116411\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate Soft Token - Validate, NO Token Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"tokenId is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"tokenId\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"required\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-api-key}}",
								"type": "text"
							},
							{
								"key": "Provider",
								"value": "ZIB",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tokenId\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v1/soft-token/validate",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"soft-token",
								"validate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SMS Reports",
			"item": [
				{
					"name": "Get SMS Reports - Registered Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"count is '3'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"count\");\r",
									"    console.log(response.count);\r",
									"    pm.expect(response.count).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"content is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"content\");\r",
									"    pm.expect(response.content).to.be.an(\"array\").that.is.not.empty;\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-report-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApiKey",
								"value": "{{registered-token-report-api-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/sms-reports?pageNum=1&pageSize=10&startDate=2021-08-20&endDate=2021-08-21",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"sms-reports"
							],
							"query": [
								{
									"key": "pageNum",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "startDate",
									"value": "2021-08-20"
								},
								{
									"key": "endDate",
									"value": "2021-08-21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SMS Reports - Unregistered Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '200'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '00'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"00\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Successful'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"count is '2'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"count\");\r",
									"    pm.expect(response.count).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"content is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"content\");\r",
									"    pm.expect(response.content).to.be.an(\"array\").that.is.not.empty;\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"unregistered-token-report-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApiKey",
								"value": "{{unregistered-token-report-api-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/sms-reports?pageNum=1&pageSize=10&startDate=2021-08-20&endDate=2021-08-21",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"sms-reports"
							],
							"query": [
								{
									"key": "pageNum",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "startDate",
									"value": "2021-08-20"
								},
								{
									"key": "endDate",
									"value": "2021-08-21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SMS Reports - No Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");        \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"ApiKey is required\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"header\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"Required request header 'ApiKey' for method parameter type String is not present\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v1/sms-reports?pageNum=1&pageSize=10&startDate=2014-10-30&endDate=2014-11-05",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"sms-reports"
							],
							"query": [
								{
									"key": "pageNum",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "startDate",
									"value": "2014-10-30"
								},
								{
									"key": "endDate",
									"value": "2014-11-05"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SMS Reports - Empty Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApiKey",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/sms-reports?pageNum=1&pageSize=10&startDate=2014-10-30&endDate=2014-11-05",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"sms-reports"
							],
							"query": [
								{
									"key": "pageNum",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "startDate",
									"value": "2014-10-30"
								},
								{
									"key": "endDate",
									"value": "2014-11-05"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SMS Reports - Invalid Api Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '404'\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10404'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10404\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Token Requestor does not exist'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Token Requestor does not exist\");        \r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"pm.environment.set(\"random-api-key\", _.randomAlphaNumeric(26));"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApiKey",
								"value": "{{random-api-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/sms-reports?pageNum=1&pageSize=10&startDate=2014-10-30&endDate=2014-11-05",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"sms-reports"
							],
							"query": [
								{
									"key": "pageNum",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "startDate",
									"value": "2014-10-30"
								},
								{
									"key": "endDate",
									"value": "2014-11-05"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SMS Reports - Invalid Start Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");       \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"startDate is invalid\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"startDate\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"invalid - expected format [yyyy-MM-dd]\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-report-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApiKey",
								"value": "{{registered-token-report-api-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/sms-reports?pageNum=1&pageSize=10&startDate=2014-10-00&endDate=2014-11-05",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"sms-reports"
							],
							"query": [
								{
									"key": "pageNum",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "startDate",
									"value": "2014-10-00"
								},
								{
									"key": "endDate",
									"value": "2014-11-05"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SMS Reports - Invalid End Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");       \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"endDate is invalid\", function () {\r",
									"    var error = response.errors[0];\r",
									"    pm.expect(error).to.have.a.property(\"fieldName\");\r",
									"    pm.expect(error.fieldName).to.eql(\"endDate\");\r",
									"    pm.expect(error).to.have.a.property(\"message\");\r",
									"    pm.expect(error.message).to.eql(\"invalid - expected format [yyyy-MM-dd]\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-report-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApiKey",
								"value": "{{registered-token-report-api-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/sms-reports?pageNum=1&pageSize=10&startDate=2014-10-10&endDate=2014-11-00",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"sms-reports"
							],
							"query": [
								{
									"key": "pageNum",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "startDate",
									"value": "2014-10-10"
								},
								{
									"key": "endDate",
									"value": "2014-11-00"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get SMS Reports - Invalid Date Range",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"http status is '400'\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"code is '10400'\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"code\");\r",
									"    pm.expect(response.code).to.eql(\"10400\");\r",
									"});\r",
									"\r",
									"pm.test(\"description is 'Bad request'\", function () {    \r",
									"    pm.expect(response).to.have.a.property(\"description\");\r",
									"    pm.expect(response.description).to.eql(\"Bad request\");       \r",
									"});\r",
									"\r",
									"pm.test(\"errors is present\", function () {\r",
									"    pm.expect(response).to.have.a.property(\"errors\");\r",
									"    pm.expect(response.errors).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"startDate is invalid\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"startDate\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"startDate must be earlier than endDate\");\r",
									"});\r",
									"\r",
									"pm.test(\"endDate is invalid\", function () {\r",
									"    var error = response.errors.find((error) => error.fieldName === \"endDate\");\r",
									"    pm.expect(error).to.exist;\r",
									"    pm.expect(error.message).to.eql(\"startDate must be earlier than endDate\");\r",
									"});"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function checkEnvVar(envVar) {",
									"    if (_.isEmpty(pm.environment.get(envVar))) {",
									"        throw new Error(\"Required environment variable [\" + envVar + \"] is missing\")",
									"    }",
									"}",
									"",
									"function switchEnv() {",
									"    checkEnvVar(\"env\");",
									"    var env = pm.environment.get(\"env\");",
									"    var envUrlVar = env + \"-url\";",
									"    checkEnvVar(envUrlVar);",
									"    var envUrl = pm.environment.get(envUrlVar);",
									"    pm.environment.set(\"url\", envUrl);",
									"}",
									"",
									"switchEnv();",
									"",
									"checkEnvVar(\"registered-token-report-api-key\");"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "ApiKey",
								"value": "{{registered-token-report-api-key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/api/v1/sms-reports?pageNum=1&pageSize=10&startDate=2014-10-10&endDate=2014-10-05",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v1",
								"sms-reports"
							],
							"query": [
								{
									"key": "pageNum",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "10"
								},
								{
									"key": "startDate",
									"value": "2014-10-10"
								},
								{
									"key": "endDate",
									"value": "2014-10-05"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"Object.prototype.randomNumeric = function(length) {",
					"    return Math.floor(Math.pow(10, length - 1) + Math.random() * (Math.pow(10, length) - Math.pow(10, length - 1) - 1));",
					"};",
					"",
					"Object.prototype.randomAlphaNumeric = function(length) {",
					"    var chars = \"0123456789abcdefghijklmnopqrstuvwxyz\";",
					"    var result = \"\";",
					"    for (var i = length; i > 0; --i) {",
					"        result += chars[Math.floor(Math.random() * chars.length)];",
					"    }",
					"    return result;",
					"}",
					"",
					"Object.prototype.randomHexadecimal = function(length) {",
					"    var chars = \"0123456789abcdef\";",
					"    var result = \"\";",
					"    for (var i = length; i > 0; --i) {",
					"        result += chars[Math.floor(Math.random() * chars.length)];",
					"    }",
					"    return result;",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}